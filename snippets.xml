<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<folders>
    <folder>
        <title>hibernate</title>
        <snippets>
            <snippet>
                <title>join-table</title>
                <content>	@JoinTable(name = "film_actor",
			joinColumns =
			@JoinColumn(
					name = "film_id", referencedColumnName = "film_id"),
			inverseJoinColumns =
			@JoinColumn(
					name = "actor_id", referencedColumnName = "actor_id"))</content>
            </snippet>
            <snippet>
                <title>indexEntities</title>
                <content>	private static void indexEntities() throws Exception {
		FullTextSession fullTextSession = Search.getFullTextSession( getSession() );
		try {
			fullTextSession.createIndexer().startAndWait();
			System.out.println("Indexing complete");
		}
		catch (InterruptedException e) {
			Thread.currentThread().interrupt();
			System.out.println("thread interrupted");
		}
		finally {
			fullTextSession.close();
		}
	}</content>
            </snippet>
            <snippet>
                <title>search</title>
                <content>	private static void search() {
		Session session = getSession();
		try {
			FullTextSession fullTextSession = Search.getFullTextSession( session );

			QueryBuilder builder = fullTextSession.getSearchFactory().buildQueryBuilder().forEntity( Film.class ).get();
			org.apache.lucene.search.Query query = builder.keyword()
					.wildcard()
					.onField( "actors.firstName" )
					.matching( "me*" )
					.createQuery();

			FullTextQuery fullTextQuery = fullTextSession.createFullTextQuery( query, Film.class );
			List&lt;Film&gt; films = fullTextQuery.list();

			System.out.println("Search results:");
			for ( Film film : films ) {
				System.out.println( film );
			}
			System.out.println("Done");
		}
		finally {
			session.close();
			ourSessionFactory.close();
		}

	}</content>
            </snippet>
        </snippets>
    </folder>
    <folder>
        <title>docker</title>
        <snippets>
            <snippet>
                <title>nginx x 100</title>
                <content>time for i in $(seq 1 100); do docker run -P -d nginx; done</content>
            </snippet>
            <snippet>
                <title>stop &amp; rm</title>
                <content>stop &amp; rm</content>
            </snippet>
            <snippet>
                <title>busybox</title>
                <content>docker run -it --name busybox busybox sh</content>
            </snippet>
            <snippet>
                <title>docker top</title>
                <content>docker top busybox</content>
            </snippet>
            <snippet>
                <title>ssh</title>
                <content>docker-machine ssh</content>
            </snippet>
            <snippet>
                <title>in.relation.to</title>
                <content>docker run -t -i -p 4242:4242 -v `pwd`:/home/dev/in.relation.to hferentschik/in.relation.to</content>
            </snippet>
            <snippet>
                <title>ip</title>
                <content>docker-machine ip default</content>
            </snippet>
            <snippet>
                <title>hello</title>
                <content>docker run busybox /bin/echo hello world</content>
            </snippet>
            <snippet>
                <title>100MB</title>
                <content>docker run busybox dd if=/dev/urandom of=file.txt bs=1048576 count=100</content>
            </snippet>
            <snippet>
                <title>ps -a</title>
                <content>docker ps -a</content>
            </snippet>
            <snippet>
                <title>docker | less</title>
                <content>docker ps -a -s | less -S</content>
            </snippet>
            <snippet>
                <title>docker --rm</title>
                <content>docker run busybox --rm /bin/echo hello world</content>
            </snippet>
            <snippet>
                <title>docker latest</title>
                <content>docker ps -l -q</content>
            </snippet>
            <snippet>
                <title>docker commit</title>
                <content>docker commit `docker ps -l -q` debug</content>
            </snippet>
            <snippet>
                <title>docker run</title>
                <content>docker run -it debug /bin/bash</content>
            </snippet>
            <snippet>
                <title>docker filter</title>
                <content>docker ps -a -s --filter 'exited=0'</content>
            </snippet>
        </snippets>
    </folder>
    <folder>
        <title>kubernetes</title>
        <snippets>
            <snippet>
                <title>oc login</title>
                <content>oc login https://10.1.2.2:8443</content>
            </snippet>
            <snippet>
                <title>oc helm</title>
                <content>oc new-project helm</content>
            </snippet>
            <snippet>
                <title>helm search</title>
                <content>./helm search nginx</content>
            </snippet>
            <snippet>
                <title>helm info</title>
                <content>./helm info example-nginx</content>
            </snippet>
            <snippet>
                <title>helm install</title>
                <content>./helm install example-nginx</content>
            </snippet>
            <snippet>
                <title>helm expose</title>
                <content>oc expose service example-nginx --hostname=nginx.10.1.2.2.xip.io</content>
            </snippet>
            <snippet>
                <title>helm scale</title>
                <content>oc scale rc/example-nginx --replicas=0</content>
            </snippet>
        </snippets>
    </folder>
    <folder>
        <title>openshift</title>
        <snippets>
            <snippet>
                <title>blue green url</title>
                <content>https://github.com/hferentschik/container-demos.git</content>
            </snippet>
            <snippet>
                <title>blue green context</title>
                <content>openshift/bluegreen</content>
            </snippet>
            <snippet>
                <title>create blue route</title>
                <content>oc expose service blue --name=bluegreen --hostname=bluegreen.10.1.2.2.xip.io</content>
            </snippet>
            <snippet>
                <title>change blue/green route</title>
                <content>oc edit route/bluegreen</content>
            </snippet>
            <snippet>
                <title>autoscale</title>
                <content>oc autoscale dc/green --min 1 --max 3 --cpu-percent=5</content>
            </snippet>
            <snippet>
                <title>hpa check</title>
                <content>oc get hpa</content>
            </snippet>
            <snippet>
                <title>ab</title>
                <content>ab -r -n 100000  http://bluegreen.10.1.2.2.xip.io/</content>
            </snippet>
        </snippets>
    </folder>
</folders>